// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using AppCircular.Entities.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace AppCircular.DataAccess.Context
{
    public partial class AppECOContext : DbContext
    {
        public AppECOContext()
        {
        }

        public AppECOContext(DbContextOptions<AppECOContext> options)
            : base(options)
        {
        }

        public virtual DbSet<tbAriaPuesto> tbAriaPuesto { get; set; }
        public virtual DbSet<tbCargo> tbCargo { get; set; }
        public virtual DbSet<tbCategoria> tbCategoria { get; set; }
        public virtual DbSet<tbCategoriaItem> tbCategoriaItem { get; set; }
        public virtual DbSet<tbCategoriaLugar> tbCategoriaLugar { get; set; }
        public virtual DbSet<tbCategoriaSubdivicion> tbCategoriaSubdivicion { get; set; }
        public virtual DbSet<tbConfiguracion> tbConfiguracion { get; set; }
        public virtual DbSet<tbContribuyente> tbContribuyente { get; set; }
        public virtual DbSet<tbDepartamento> tbDepartamento { get; set; }
        public virtual DbSet<tbDesperdicio> tbDesperdicio { get; set; }
        public virtual DbSet<tbDesperdicioCatedoria> tbDesperdicioCatedoria { get; set; }
        public virtual DbSet<tbDesperdicioImagen> tbDesperdicioImagen { get; set; }
        public virtual DbSet<tbEducacion> tbEducacion { get; set; }
        public virtual DbSet<tbExperiencia> tbExperiencia { get; set; }
        public virtual DbSet<tbFormaAdquirir> tbFormaAdquirir { get; set; }
        public virtual DbSet<tbGenero> tbGenero { get; set; }
        public virtual DbSet<tbGuardar> tbGuardar { get; set; }
        public virtual DbSet<tbHorario> tbHorario { get; set; }
        public virtual DbSet<tbIdioma> tbIdioma { get; set; }
        public virtual DbSet<tbIdiomaItem> tbIdiomaItem { get; set; }
        public virtual DbSet<tbInfoUnicaUsuario> tbInfoUnicaUsuario { get; set; }
        public virtual DbSet<tbLogroEventoCategoria> tbLogroEventoCategoria { get; set; }
        public virtual DbSet<tbLugar> tbLugar { get; set; }
        public virtual DbSet<tbMunicipio> tbMunicipio { get; set; }
        public virtual DbSet<tbNeceitaCatedoria> tbNeceitaCatedoria { get; set; }
        public virtual DbSet<tbNecesita> tbNecesita { get; set; }
        public virtual DbSet<tbNivelEducativo> tbNivelEducativo { get; set; }
        public virtual DbSet<tbOngEvento> tbOngEvento { get; set; }
        public virtual DbSet<tbOngEventoImagen> tbOngEventoImagen { get; set; }
        public virtual DbSet<tbOrigeDesperdicio> tbOrigeDesperdicio { get; set; }
        public virtual DbSet<tbOrigen> tbOrigen { get; set; }
        public virtual DbSet<tbOrigenServicio> tbOrigenServicio { get; set; }
        public virtual DbSet<tbOtrosConocimientos> tbOtrosConocimientos { get; set; }
        public virtual DbSet<tbPais> tbPais { get; set; }
        public virtual DbSet<tbProceso> tbProceso { get; set; }
        public virtual DbSet<tbProdCategoria> tbProdCategoria { get; set; }
        public virtual DbSet<tbProducto> tbProducto { get; set; }
        public virtual DbSet<tbProductoImagen> tbProductoImagen { get; set; }
        public virtual DbSet<tbPuesto> tbPuesto { get; set; }
        public virtual DbSet<tbServicio> tbServicio { get; set; }
        public virtual DbSet<tbServicioCategoria> tbServicioCategoria { get; set; }
        public virtual DbSet<tbServicioImagen> tbServicioImagen { get; set; }
        public virtual DbSet<tbSubdivicionLugar> tbSubdivicionLugar { get; set; }
        public virtual DbSet<tbTipoContrato> tbTipoContrato { get; set; }
        public virtual DbSet<tbTipoPublicacion> tbTipoPublicacion { get; set; }
        public virtual DbSet<tbTipoServicio> tbTipoServicio { get; set; }
        public virtual DbSet<tbTipoUsuario> tbTipoUsuario { get; set; }
        public virtual DbSet<tbTitulo> tbTitulo { get; set; }
        public virtual DbSet<tbTituloProc> tbTituloProc { get; set; }
        public virtual DbSet<tbUbicacion> tbUbicacion { get; set; }
        public virtual DbSet<tbUsuarios> tbUsuarios { get; set; }
        public virtual DbSet<tbVacante> tbVacante { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.UseCollation("SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<tbAriaPuesto>(entity =>
            {
                entity.HasKey(e => e.ariaP_Id)
                    .HasName("PK_Genl_tbAriaPuesto_ariaP_Id");

                entity.ToTable("tbAriaPuesto", "Genl");

                entity.Property(e => e.ariaP_Descripcion)
                    .IsRequired()
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<tbCargo>(entity =>
            {
                entity.HasKey(e => e.carg_Id)
                    .HasName("PK_Genl_tbCargo_carg_Id");

                entity.ToTable("tbCargo", "Genl");

                entity.Property(e => e.carg_Descripcion)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.HasOne(d => d.vac)
                    .WithMany(p => p.tbCargo)
                    .HasForeignKey(d => d.vac_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbCargo_tbVacante_vac_Id");
            });

            modelBuilder.Entity<tbCategoria>(entity =>
            {
                entity.HasKey(e => e.catg_Id)
                    .HasName("PK_Genl_tbCategoria_catg_Id");

                entity.ToTable("tbCategoria", "Genl");

                entity.Property(e => e.catg_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<tbCategoriaItem>(entity =>
            {
                entity.HasKey(e => e.catgItem_Id)
                    .HasName("PK_Genl_tbCategoriaItem_catgItem_Id");

                entity.ToTable("tbCategoriaItem", "Genl");

                entity.HasOne(d => d.catg)
                    .WithMany(p => p.tbCategoriaItem)
                    .HasForeignKey(d => d.catg_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbCategoriaItem_tbCategoria_catg_Id");

                entity.HasOne(d => d.user)
                    .WithMany(p => p.tbCategoriaItem)
                    .HasForeignKey(d => d.user_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbCategoriaItem_tbUsuarios_user_Id");
            });

            modelBuilder.Entity<tbCategoriaLugar>(entity =>
            {
                entity.HasKey(e => e.catLug_Id)
                    .HasName("PK_Genl_tbCategoriaLugar_catLug_Id");

                entity.ToTable("tbCategoriaLugar", "Genl");

                entity.Property(e => e.catLug_Nombre)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<tbCategoriaSubdivicion>(entity =>
            {
                entity.HasKey(e => e.sub_Id)
                    .HasName("PK_Genl_tbCategoriaSubdivicion_sub_Id");

                entity.ToTable("tbCategoriaSubdivicion", "Genl");

                entity.Property(e => e.sub_Nombre)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<tbConfiguracion>(entity =>
            {
                entity.HasKey(e => e.conf_Id)
                    .HasName("PK_Genl_tbConfiguracion_conf_Id");

                entity.ToTable("tbConfiguracion", "Genl");

                entity.HasIndex(e => e.conf_Nombre, "UQ_Genl_tbConfiguracion_conf_Nombre")
                    .IsUnique();

                entity.Property(e => e.conf_Descripcion).HasMaxLength(2000);

                entity.Property(e => e.conf_Nombre)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.conf_Valor)
                    .IsRequired()
                    .HasMaxLength(2000);
            });

            modelBuilder.Entity<tbContribuyente>(entity =>
            {
                entity.HasKey(e => e.contr_Id)
                    .HasName("PK_Genl_tbContribuyente_contr_Id");

                entity.ToTable("tbContribuyente", "Genl");

                entity.Property(e => e.contr_Descripcion)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.HasOne(d => d.prod)
                    .WithMany(p => p.tbContribuyente)
                    .HasForeignKey(d => d.prod_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbContribuyente_tbProducto_prod_Id");

                entity.HasOne(d => d.user)
                    .WithMany(p => p.tbContribuyente)
                    .HasForeignKey(d => d.user_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbContribuyente_tbUsuarios_user_Id");
            });

            modelBuilder.Entity<tbDepartamento>(entity =>
            {
                entity.HasKey(e => e.dept_Id)
                    .HasName("PK_Genl_tbDepartamento_dept_Id");

                entity.ToTable("tbDepartamento", "Genl");

                entity.Property(e => e.dept_Nombre)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.HasOne(d => d.pais)
                    .WithMany(p => p.tbDepartamento)
                    .HasForeignKey(d => d.pais_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbDepartamento_tbPais_pai_Id");
            });

            modelBuilder.Entity<tbDesperdicio>(entity =>
            {
                entity.HasKey(e => e.desp_Id)
                    .HasName("PK_Genl_tbDesperdicio_desp_Id");

                entity.ToTable("tbDesperdicio", "Genl");

                entity.Property(e => e.desp_Descripcion)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.desp_Imagen).HasMaxLength(3000);

                entity.Property(e => e.desp_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.desp_Precio).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.desCa)
                    .WithMany(p => p.tbDesperdicio)
                    .HasForeignKey(d => d.desCa_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbDesperdicio_tbDesperdicioCatedoria_desCa_Id");

                entity.HasOne(d => d.oriDe)
                    .WithMany(p => p.tbDesperdicio)
                    .HasForeignKey(d => d.oriDe_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbDesperdicio_tbOrigeDesperdicio_oriDe_Id");

                entity.HasOne(d => d.prod)
                    .WithMany(p => p.tbDesperdicio)
                    .HasForeignKey(d => d.prod_Id)
                    .HasConstraintName("FK_Genl_tbDesperdicio_tbProducto_prod_Id");

                entity.HasOne(d => d.serv)
                    .WithMany(p => p.tbDesperdicio)
                    .HasForeignKey(d => d.serv_Id)
                    .HasConstraintName("FK_Genl_tbDesperdicio_tbServicio_serv_Id");

                entity.HasOne(d => d.user)
                    .WithMany(p => p.tbDesperdicio)
                    .HasForeignKey(d => d.user_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbDesperdicio_tbUsuarios_user_Id");
            });

            modelBuilder.Entity<tbDesperdicioCatedoria>(entity =>
            {
                entity.HasKey(e => e.desCa_Id)
                    .HasName("PK_Genl_tbDesperdicioCatedoria_desCa_Id");

                entity.ToTable("tbDesperdicioCatedoria", "Genl");

                entity.Property(e => e.desCa_Descripcion)
                    .IsRequired()
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<tbDesperdicioImagen>(entity =>
            {
                entity.HasKey(e => e.despIm_Id)
                    .HasName("PK_Genl_tbDesperdicioImagen_despIm_Id");

                entity.ToTable("tbDesperdicioImagen", "Genl");

                entity.Property(e => e.despIm_Ruta)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.HasOne(d => d.desp)
                    .WithMany(p => p.tbDesperdicioImagen)
                    .HasForeignKey(d => d.desp_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbDesperdicioImagen_tbDesperdicio_desp_Id");
            });

            modelBuilder.Entity<tbEducacion>(entity =>
            {
                entity.HasKey(e => e.ed_Id)
                    .HasName("PK_Genl_tbEducacion_catEd_Id");

                entity.ToTable("tbEducacion", "Genl");

                entity.HasOne(d => d.titu)
                    .WithMany(p => p.tbEducacion)
                    .HasForeignKey(d => d.titu_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbEducacion_tbTitulo_titu_Id");

                entity.HasOne(d => d.vac)
                    .WithMany(p => p.tbEducacion)
                    .HasForeignKey(d => d.vac_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbEducacion_tbVacante_vac_Id");
            });

            modelBuilder.Entity<tbExperiencia>(entity =>
            {
                entity.HasKey(e => e.exp_Id)
                    .HasName("PK_Genl_tbExperiencia_exp_Id");

                entity.ToTable("tbExperiencia", "Genl");

                entity.HasOne(d => d.ariaP)
                    .WithMany(p => p.tbExperiencia)
                    .HasForeignKey(d => d.ariaP_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbExperiencia_tbAriaPuesto_ariaP_Id");

                entity.HasOne(d => d.vac)
                    .WithMany(p => p.tbExperiencia)
                    .HasForeignKey(d => d.vac_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbExperiencia_tbVacante_vac_Id");
            });

            modelBuilder.Entity<tbFormaAdquirir>(entity =>
            {
                entity.HasKey(e => e.forAd_Id)
                    .HasName("PK_Genl_tbFormaAdquirir_forAd_Id");

                entity.ToTable("tbFormaAdquirir", "Genl");

                entity.Property(e => e.forAd_Descripcion)
                    .IsRequired()
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<tbGenero>(entity =>
            {
                entity.HasKey(e => e.gene_Id)
                    .HasName("PK_Genl_tbGenero_gene_Id");

                entity.ToTable("tbGenero", "Genl");

                entity.Property(e => e.gene_Descripcion)
                    .IsRequired()
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<tbGuardar>(entity =>
            {
                entity.HasKey(e => e.guard_Id)
                    .HasName("PK_Genl_tbGuardar_guard_Id");

                entity.ToTable("tbGuardar", "Genl");

                entity.HasOne(d => d.user)
                    .WithMany(p => p.tbGuardar)
                    .HasForeignKey(d => d.user_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbGuardar_tbUsuarios_user_Id");
            });

            modelBuilder.Entity<tbHorario>(entity =>
            {
                entity.HasKey(e => e.hor_Id)
                    .HasName("PK_Genl_tbHorario_hor_Id");

                entity.ToTable("tbHorario", "Genl");

                entity.HasOne(d => d.user)
                    .WithMany(p => p.tbHorario)
                    .HasForeignKey(d => d.user_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbHorario_tbUsuarios_User_Id");
            });

            modelBuilder.Entity<tbIdioma>(entity =>
            {
                entity.HasKey(e => e.idio_Id)
                    .HasName("PK_Genl_tbIdioma_idio_Id");

                entity.ToTable("tbIdioma", "Genl");

                entity.Property(e => e.idio_Descripcion)
                    .IsRequired()
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<tbIdiomaItem>(entity =>
            {
                entity.HasKey(e => e.idItm_Id)
                    .HasName("PK_Genl_tbIdiomaItem_idItm_Id");

                entity.ToTable("tbIdiomaItem", "Genl");

                entity.HasOne(d => d.vac)
                    .WithMany(p => p.tbIdiomaItem)
                    .HasForeignKey(d => d.vac_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbIdiomaItem_tbVacante_vac_Id");
            });

            modelBuilder.Entity<tbInfoUnicaUsuario>(entity =>
            {
                entity.HasKey(e => e.ipInf_Id)
                    .HasName("PK_Genl_tbInfoUnicaUsuario_tipInfUs_Id");

                entity.ToTable("tbInfoUnicaUsuario", "Genl");

                entity.Property(e => e.tInf_IgualSubInfo)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.tInf_Nombre)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.tInf_RutaLogo).HasMaxLength(2000);

                entity.Property(e => e.tInf_RutaPaginaWed).HasMaxLength(2000);

                entity.Property(e => e.tInf_Verificado).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.tipUs)
                    .WithMany(p => p.tbInfoUnicaUsuario)
                    .HasForeignKey(d => d.tipUs_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbInfoUnicaUsuario_tbTipoUsuario_tipUs_Id");
            });

            modelBuilder.Entity<tbLogroEventoCategoria>(entity =>
            {
                entity.HasKey(e => e.logCa_Id)
                    .HasName("PK_Genl_tbLogroEventoCategoria_logCa_Id");

                entity.ToTable("tbLogroEventoCategoria", "Genl");

                entity.Property(e => e.logCa_Descripcion)
                    .IsRequired()
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<tbLugar>(entity =>
            {
                entity.HasKey(e => e.lug_Id)
                    .HasName("PK_Genl_tbLugar_lug_Id");

                entity.ToTable("tbLugar", "Genl");

                entity.Property(e => e.lug_Nombre)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.HasOne(d => d.catLug)
                    .WithMany(p => p.tbLugar)
                    .HasForeignKey(d => d.catLug_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbLugar_tbCategoriaLugar_catLug_Id");

                entity.HasOne(d => d.muni)
                    .WithMany(p => p.tbLugar)
                    .HasForeignKey(d => d.muni_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbLugar_tbMunicipio_muni_Id");
            });

            modelBuilder.Entity<tbMunicipio>(entity =>
            {
                entity.HasKey(e => e.muni_Id)
                    .HasName("PK_Genl_tbMunicipio_muni_Id");

                entity.ToTable("tbMunicipio", "Genl");

                entity.Property(e => e.muni_Nombre)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.muni_ValidaciosTelefono).HasMaxLength(1000);

                entity.Property(e => e.muni_ValidaciosTelefonoFijo).HasMaxLength(1000);

                entity.HasOne(d => d.dept)
                    .WithMany(p => p.tbMunicipio)
                    .HasForeignKey(d => d.dept_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbMunicipio_tbDepartamento_dept_Id");
            });

            modelBuilder.Entity<tbNeceitaCatedoria>(entity =>
            {
                entity.HasKey(e => e.nesCa_Id)
                    .HasName("PK_Genl_tbNeceitaCatedoria_nesCa_Id");

                entity.ToTable("tbNeceitaCatedoria", "Genl");

                entity.Property(e => e.nesCa_Descripcion)
                    .IsRequired()
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<tbNecesita>(entity =>
            {
                entity.HasKey(e => e.nece_Id)
                    .HasName("PK_Genl_tbNecesita_desp_Id");

                entity.ToTable("tbNecesita", "Genl");

                entity.Property(e => e.nece_Descripcion)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.nece_Imagen).HasMaxLength(3000);

                entity.Property(e => e.nece_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.nece_RandoInicial).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.nece_RangoFinal).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.forAd)
                    .WithMany(p => p.tbNecesita)
                    .HasForeignKey(d => d.forAd_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbNecesita_tbFormaAdquirir_forAd_Id");

                entity.HasOne(d => d.nesCa)
                    .WithMany(p => p.tbNecesita)
                    .HasForeignKey(d => d.nesCa_Id)
                    .HasConstraintName("FK_Genl_tbNecesita_tbNeceitaCatedoria_nesCa_Id");

                entity.HasOne(d => d.user)
                    .WithMany(p => p.tbNecesita)
                    .HasForeignKey(d => d.user_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbNecesita_tbUsuarios_user_Id");
            });

            modelBuilder.Entity<tbNivelEducativo>(entity =>
            {
                entity.HasKey(e => e.nivEd_Id)
                    .HasName("PK_Genl_tbNivelEducativo_nivEd_Id");

                entity.ToTable("tbNivelEducativo", "Genl");

                entity.Property(e => e.nivEd_Descripcion)
                    .IsRequired()
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<tbOngEvento>(entity =>
            {
                entity.HasKey(e => e.ongEv_Id)
                    .HasName("PK_Genl_tbOngEvento_ongEv_Id");

                entity.ToTable("tbOngEvento", "Genl");

                entity.Property(e => e.ongEv_Descripcion)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.ongEv_Fecha).HasColumnType("date");

                entity.Property(e => e.ongEv_Nombre)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.ongEv_Ruta).HasMaxLength(3000);

                entity.HasOne(d => d.logCa)
                    .WithMany(p => p.tbOngEvento)
                    .HasForeignKey(d => d.logCa_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbOngEvento_tbLogroEventoCategoria_logCa_Id");

                entity.HasOne(d => d.ubc)
                    .WithMany(p => p.tbOngEvento)
                    .HasForeignKey(d => d.ubc_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbOngEvento_tbUbicacion_ubc_Id");
            });

            modelBuilder.Entity<tbOngEventoImagen>(entity =>
            {
                entity.HasKey(e => e.ongIm_Id)
                    .HasName("PK_Genl_tbOngEventoImagen_logCa_Id");

                entity.ToTable("tbOngEventoImagen", "Genl");

                entity.Property(e => e.ongIm_Ruta)
                    .IsRequired()
                    .HasMaxLength(3000);

                entity.HasOne(d => d.ongEv)
                    .WithMany(p => p.tbOngEventoImagen)
                    .HasForeignKey(d => d.ongEv_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbOngEventoImagen_tbOngEvento_ongEv_Id");
            });

            modelBuilder.Entity<tbOrigeDesperdicio>(entity =>
            {
                entity.HasKey(e => e.oriDe_Id)
                    .HasName("PK_Genl_tbOrigeDesperdicio_oriDe_Id");

                entity.ToTable("tbOrigeDesperdicio", "Genl");

                entity.Property(e => e.oriDe_Descripcion)
                    .IsRequired()
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<tbOrigen>(entity =>
            {
                entity.HasKey(e => e.orig_Id)
                    .HasName("PK_Genl_tbOrigen_orig_Id");

                entity.ToTable("tbOrigen", "Genl");

                entity.Property(e => e.orig_Descripcion)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.orig_Imagen)
                    .IsRequired()
                    .HasMaxLength(3000);

                entity.HasOne(d => d.prod)
                    .WithMany(p => p.tbOrigen)
                    .HasForeignKey(d => d.prod_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbOrigen_tbProducto_prod_Id");
            });

            modelBuilder.Entity<tbOrigenServicio>(entity =>
            {
                entity.HasKey(e => e.oriS_Id)
                    .HasName("PK_Genl_tbOrigenServicio_oriS_Id");

                entity.ToTable("tbOrigenServicio", "Genl");

                entity.Property(e => e.oriS_Descripcion)
                    .IsRequired()
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<tbOtrosConocimientos>(entity =>
            {
                entity.HasKey(e => e.otrCo_Id)
                    .HasName("PK_Genl_tbOtrosConocimientos_otrCo_Id");

                entity.ToTable("tbOtrosConocimientos", "Genl");

                entity.Property(e => e.otrCo_Descripcion)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.HasOne(d => d.vac)
                    .WithMany(p => p.tbOtrosConocimientos)
                    .HasForeignKey(d => d.vac_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbOtrosConocimientos_tbVacante_vac_Id");
            });

            modelBuilder.Entity<tbPais>(entity =>
            {
                entity.HasKey(e => e.pais_Id)
                    .HasName("PK_Genl_tbPais_pais_Id");

                entity.ToTable("tbPais", "Genl");

                entity.Property(e => e.pais_Abrebiatura).HasMaxLength(10);

                entity.Property(e => e.pais_Nombre)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<tbProceso>(entity =>
            {
                entity.HasKey(e => e.proc_Id)
                    .HasName("PK_Genl_tbProceso_proc");

                entity.ToTable("tbProceso", "Genl");

                entity.Property(e => e.proc_Descripcion)
                    .IsRequired()
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<tbProdCategoria>(entity =>
            {
                entity.HasKey(e => e.proCa_Id)
                    .HasName("PK_Genl_tbProdCategoria_proCa_Id");

                entity.ToTable("tbProdCategoria", "Genl");

                entity.Property(e => e.proCa_Descripcion)
                    .IsRequired()
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<tbProducto>(entity =>
            {
                entity.HasKey(e => e.prod_Id)
                    .HasName("PK_Genl_tbProducto_prod_Id");

                entity.ToTable("tbProducto", "Genl");

                entity.Property(e => e.prod_Descripcion)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.prod_Imagen).HasMaxLength(3000);

                entity.Property(e => e.prod_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.prod_Precio).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.proCa)
                    .WithMany(p => p.tbProducto)
                    .HasForeignKey(d => d.proCa_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbProducto_tbProdCategoria_proCa_Id");

                entity.HasOne(d => d.user)
                    .WithMany(p => p.tbProducto)
                    .HasForeignKey(d => d.user_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbProducto_tbUsuarios_user_Id");
            });

            modelBuilder.Entity<tbProductoImagen>(entity =>
            {
                entity.HasKey(e => e.proIm_Id)
                    .HasName("PK_Genl_tbContribuyente_proIm_Id");

                entity.ToTable("tbProductoImagen", "Genl");

                entity.Property(e => e.proIm_Ruta)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.HasOne(d => d.prod)
                    .WithMany(p => p.tbProductoImagen)
                    .HasForeignKey(d => d.prod_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbContribuyente_tbProducto_user_Id");
            });

            modelBuilder.Entity<tbPuesto>(entity =>
            {
                entity.HasKey(e => e.puest_Id)
                    .HasName("PK_Genl_tbPuesto_puest_Id");

                entity.ToTable("tbPuesto", "Genl");

                entity.Property(e => e.puest_Descripcion)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.HasOne(d => d.ariaP)
                    .WithMany(p => p.tbPuesto)
                    .HasForeignKey(d => d.ariaP_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbPuesto_tbAriaPuesto_ariaP_Id");
            });

            modelBuilder.Entity<tbServicio>(entity =>
            {
                entity.HasKey(e => e.serv_Id)
                    .HasName("PK_Genl_tbServicio_serv_Id");

                entity.ToTable("tbServicio", "Genl");

                entity.Property(e => e.serv_Descripcion)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.serv_Imagen).HasMaxLength(3000);

                entity.Property(e => e.serv_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.serv_Precio).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.oriS)
                    .WithMany(p => p.tbServicio)
                    .HasForeignKey(d => d.oriS_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbServicio_tbOrigenServicio_oriS_Id");

                entity.HasOne(d => d.serCa)
                    .WithMany(p => p.tbServicio)
                    .HasForeignKey(d => d.serCa_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbServicio_tbServicioCategoria_serCa_Id");

                entity.HasOne(d => d.tipSe)
                    .WithMany(p => p.tbServicio)
                    .HasForeignKey(d => d.tipSe_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbServicio_tbTipoServicio_tipSe_Id");

                entity.HasOne(d => d.user)
                    .WithMany(p => p.tbServicio)
                    .HasForeignKey(d => d.user_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbServicio_tbUsuarios_user_Id");
            });

            modelBuilder.Entity<tbServicioCategoria>(entity =>
            {
                entity.HasKey(e => e.serCa_Id)
                    .HasName("PK_Genl_tbServicioCategoria_serCa_Id");

                entity.ToTable("tbServicioCategoria", "Genl");

                entity.Property(e => e.serCa_Descripcion)
                    .IsRequired()
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<tbServicioImagen>(entity =>
            {
                entity.HasKey(e => e.serIm_Id)
                    .HasName("PK_Genl_tbServicioImagen_serIm_Id");

                entity.ToTable("tbServicioImagen", "Genl");

                entity.Property(e => e.serIm_Ruta)
                    .IsRequired()
                    .HasMaxLength(3000);

                entity.HasOne(d => d.serv)
                    .WithMany(p => p.tbServicioImagen)
                    .HasForeignKey(d => d.serv_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbServicioImagen_tbServicio_serv_Id");
            });

            modelBuilder.Entity<tbSubdivicionLugar>(entity =>
            {
                entity.HasKey(e => e.subLug_Id)
                    .HasName("PK_Genl_tbSubdivicionLugar_subLug_Id");

                entity.ToTable("tbSubdivicionLugar", "Genl");

                entity.Property(e => e.subLug_Nombre)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.HasOne(d => d.lug)
                    .WithMany(p => p.tbSubdivicionLugar)
                    .HasForeignKey(d => d.lug_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbSubdivicionLugar_tbLugar_lug_Id");

                entity.HasOne(d => d.sub)
                    .WithMany(p => p.tbSubdivicionLugar)
                    .HasForeignKey(d => d.sub_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbSubdivicionLugar_tbCategoriaSubdivicion_sub_Id");
            });

            modelBuilder.Entity<tbTipoContrato>(entity =>
            {
                entity.HasKey(e => e.tipC_Id)
                    .HasName("PK_Genl_tbTipoContrato_tipC_Id");

                entity.ToTable("tbTipoContrato", "Genl");

                entity.Property(e => e.tipC_Descripcion)
                    .IsRequired()
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<tbTipoPublicacion>(entity =>
            {
                entity.HasKey(e => e.tiPub_Id)
                    .HasName("PK_Genl_tbTipoPublicacion_tiPub_Id");

                entity.ToTable("tbTipoPublicacion", "Genl");

                entity.Property(e => e.tiPub_Descripcion)
                    .IsRequired()
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<tbTipoServicio>(entity =>
            {
                entity.HasKey(e => e.tipSe_Id)
                    .HasName("PK_Genl_tbTipoServicio_tipSe_Id");

                entity.ToTable("tbTipoServicio", "Genl");

                entity.Property(e => e.tipSe_Descripcion)
                    .IsRequired()
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<tbTipoUsuario>(entity =>
            {
                entity.HasKey(e => e.tipUs_Id)
                    .HasName("PK_Genl_tbTipoUsuario_tipUs_Id");

                entity.ToTable("tbTipoUsuario", "Genl");

                entity.Property(e => e.tipUs_Descripcion)
                    .IsRequired()
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<tbTitulo>(entity =>
            {
                entity.HasKey(e => e.titu_Id)
                    .HasName("PK_Genl_tbTitulo_titu_Id");

                entity.ToTable("tbTitulo", "Genl");

                entity.Property(e => e.titu_Descripcion)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.HasOne(d => d.ariaP)
                    .WithMany(p => p.tbTitulo)
                    .HasForeignKey(d => d.ariaP_Id)
                    .HasConstraintName("FK_Genl_tbTitulo_tbAriaPuesto_nesCa_Id");

                entity.HasOne(d => d.nivEd)
                    .WithMany(p => p.tbTitulo)
                    .HasForeignKey(d => d.nivEd_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbTitulo_tbNivelEducativo_nivEd_Id");
            });

            modelBuilder.Entity<tbTituloProc>(entity =>
            {
                entity.HasKey(e => e.tiProc_Id)
                    .HasName("PK_Genl_tbTituloProc_tiProc_Id");

                entity.ToTable("tbTituloProc", "Genl");

                entity.HasOne(d => d.proc)
                    .WithMany(p => p.tbTituloProc)
                    .HasForeignKey(d => d.proc_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbTituloProc_tbProceso_proc_Id");

                entity.HasOne(d => d.titu)
                    .WithMany(p => p.tbTituloProc)
                    .HasForeignKey(d => d.titu_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbTituloProc_tbTitulo_titu_Id");
            });

            modelBuilder.Entity<tbUbicacion>(entity =>
            {
                entity.HasKey(e => e.ubc_Id)
                    .HasName("PK_Genl_tbUbicacion_ubc_Id");

                entity.ToTable("tbUbicacion", "Genl");

                entity.Property(e => e.ubc_Latitud)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ubc_Longitub)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.HasOne(d => d.subLug)
                    .WithMany(p => p.tbUbicacion)
                    .HasForeignKey(d => d.subLug_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbUbicacion_tbSubdivicionLugar_subLug_Id");
            });

            modelBuilder.Entity<tbUsuarios>(entity =>
            {
                entity.HasKey(e => e.user_Id)
                    .HasName("PK_Genl_tbUsuarios_User_Id");

                entity.ToTable("tbUsuarios", "Genl");

                entity.Property(e => e.user_Correo).HasMaxLength(100);

                entity.Property(e => e.user_Descripcion)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.user_Facebook).HasMaxLength(100);

                entity.Property(e => e.user_FechaFundacion).HasColumnType("date");

                entity.Property(e => e.user_Intagram).HasMaxLength(100);

                entity.Property(e => e.user_NombreUsuario)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('N/A')");

                entity.Property(e => e.user_Password).HasMaxLength(1000);

                entity.Property(e => e.user_PasswordSal).HasMaxLength(1000);

                entity.Property(e => e.user_RTNInstitucion).HasMaxLength(100);

                entity.Property(e => e.user_RTNPersona).HasMaxLength(100);

                entity.Property(e => e.user_TelefonoPrincipal)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.user_TelefonoSecundario).HasMaxLength(50);

                entity.HasOne(d => d.ipInf)
                    .WithMany(p => p.tbUsuarios)
                    .HasForeignKey(d => d.ipInf_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbUsuarios_tbInfoUnicaUsuario_ipInf_Id");

                entity.HasOne(d => d.ubc)
                    .WithMany(p => p.tbUsuarios)
                    .HasForeignKey(d => d.ubc_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbUsuarios_tbUbicacion_ubc_Id");
            });

            modelBuilder.Entity<tbVacante>(entity =>
            {
                entity.HasKey(e => e.vac_Id)
                    .HasName("PK_Genl_tbVacante_catEd_Id");

                entity.ToTable("tbVacante", "Genl");

                entity.Property(e => e.vac_DescripcionOferta)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.Property(e => e.vac_Edad).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.vac_SalarioMax).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.ariaP)
                    .WithMany(p => p.tbVacante)
                    .HasForeignKey(d => d.ariaP_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbVacante_tbAriaPuesto_ariaP_Id");

                entity.HasOne(d => d.gene)
                    .WithMany(p => p.tbVacante)
                    .HasForeignKey(d => d.gene_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbVacante_tbGenero_gene_Id");

                entity.HasOne(d => d.puest)
                    .WithMany(p => p.tbVacante)
                    .HasForeignKey(d => d.puest_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbVacante_tbPuesto_puest_Id");

                entity.HasOne(d => d.tipC)
                    .WithMany(p => p.tbVacante)
                    .HasForeignKey(d => d.tipC_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbVacante_tbTipoContrato_tipC_Id");

                entity.HasOne(d => d.user)
                    .WithMany(p => p.tbVacante)
                    .HasForeignKey(d => d.user_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Genl_tbVacante_tbUsuarios_user_Id");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using ApiCircularGraphQL.Domain.Entities;
using Microsoft.EntityFrameworkCore;

namespace ApiCircularGraphQL.Infrastructure.Persistence;

public partial class AppECOContext : DbContext
{
    public AppECOContext(DbContextOptions<AppECOContext> options)
        : base(options)
    {
    }

    public virtual DbSet<tbAlquilerServicios> tbAlquilerServicios { get; set; }

    public virtual DbSet<tbAlquilerServiciosPorFactura> tbAlquilerServiciosPorFactura { get; set; }

    public virtual DbSet<tbAriaPuesto> tbAriaPuesto { get; set; }

    public virtual DbSet<tbCargo> tbCargo { get; set; }

    public virtual DbSet<tbCatalogoImagen> tbCatalogoImagen { get; set; }

    public virtual DbSet<tbCatalogoPorUsuario> tbCatalogoPorUsuario { get; set; }

    public virtual DbSet<tbCategoria> tbCategoria { get; set; }

    public virtual DbSet<tbCategoriaItem> tbCategoriaItem { get; set; }

    public virtual DbSet<tbCategoriaLugar> tbCategoriaLugar { get; set; }

    public virtual DbSet<tbCategoriaPorAlquilar> tbCategoriaPorAlquilar { get; set; }

    public virtual DbSet<tbCategoriaPorHabilidad> tbCategoriaPorHabilidad { get; set; }

    public virtual DbSet<tbCategoriaPorNecesidad> tbCategoriaPorNecesidad { get; set; }

    public virtual DbSet<tbCategoriaPorProducto> tbCategoriaPorProducto { get; set; }

    public virtual DbSet<tbCategoriaPorServicio> tbCategoriaPorServicio { get; set; }

    public virtual DbSet<tbCategoriaPorVenta> tbCategoriaPorVenta { get; set; }

    public virtual DbSet<tbCategoriaReaccion> tbCategoriaReaccion { get; set; }

    public virtual DbSet<tbCategoriaSubdivicion> tbCategoriaSubdivicion { get; set; }

    public virtual DbSet<tbConfiguracion> tbConfiguracion { get; set; }

    public virtual DbSet<tbDepartamento> tbDepartamento { get; set; }

    public virtual DbSet<tbDesperdicio> tbDesperdicio { get; set; }

    public virtual DbSet<tbDesperdicioPorFactura> tbDesperdicioPorFactura { get; set; }

    public virtual DbSet<tbEducacion> tbEducacion { get; set; }

    public virtual DbSet<tbEstadoAlquilerServicios> tbEstadoAlquilerServicios { get; set; }

    public virtual DbSet<tbEstadoEvento> tbEstadoEvento { get; set; }

    public virtual DbSet<tbEvento> tbEvento { get; set; }

    public virtual DbSet<tbExperiencia> tbExperiencia { get; set; }

    public virtual DbSet<tbFactura> tbFactura { get; set; }

    public virtual DbSet<tbFacturaDetalle> tbFacturaDetalle { get; set; }

    public virtual DbSet<tbFiltroCategoriaTipo> tbFiltroCategoriaTipo { get; set; }

    public virtual DbSet<tbGenero> tbGenero { get; set; }

    public virtual DbSet<tbHabilidad> tbHabilidad { get; set; }

    public virtual DbSet<tbHabilidadPorFactura> tbHabilidadPorFactura { get; set; }

    public virtual DbSet<tbHorario> tbHorario { get; set; }

    public virtual DbSet<tbIdioma> tbIdioma { get; set; }

    public virtual DbSet<tbIdiomaItem> tbIdiomaItem { get; set; }

    public virtual DbSet<tbInfoUnicaUsuario> tbInfoUnicaUsuario { get; set; }

    public virtual DbSet<tbLogroEventoCategoria> tbLogroEventoCategoria { get; set; }

    public virtual DbSet<tbLugar> tbLugar { get; set; }

    public virtual DbSet<tbMunicipio> tbMunicipio { get; set; }

    public virtual DbSet<tbNecesitan> tbNecesitan { get; set; }

    public virtual DbSet<tbNivelEducativo> tbNivelEducativo { get; set; }

    public virtual DbSet<tbOrigen> tbOrigen { get; set; }

    public virtual DbSet<tbOtrosConocimientos> tbOtrosConocimientos { get; set; }

    public virtual DbSet<tbPais> tbPais { get; set; }

    public virtual DbSet<tbPedido> tbPedido { get; set; }

    public virtual DbSet<tbPedidoDetalle> tbPedidoDetalle { get; set; }

    public virtual DbSet<tbPrecioProducto> tbPrecioProducto { get; set; }

    public virtual DbSet<tbProceso> tbProceso { get; set; }

    public virtual DbSet<tbProducto> tbProducto { get; set; }

    public virtual DbSet<tbProductoPorFactura> tbProductoPorFactura { get; set; }

    public virtual DbSet<tbProductoPorPedido> tbProductoPorPedido { get; set; }

    public virtual DbSet<tbPuesto> tbPuesto { get; set; }

    public virtual DbSet<tbReaccion> tbReaccion { get; set; }

    public virtual DbSet<tbRoles> tbRoles { get; set; }

    public virtual DbSet<tbRolesClaims> tbRolesClaims { get; set; }

    public virtual DbSet<tbServicio> tbServicio { get; set; }

    public virtual DbSet<tbServicioPorFactura> tbServicioPorFactura { get; set; }

    public virtual DbSet<tbServicioPorPedido> tbServicioPorPedido { get; set; }

    public virtual DbSet<tbSubCategoria> tbSubCategoria { get; set; }

    public virtual DbSet<tbSubdivicionLugar> tbSubdivicionLugar { get; set; }

    public virtual DbSet<tbTiempo> tbTiempo { get; set; }

    public virtual DbSet<tbTipoCatalogo> tbTipoCatalogo { get; set; }

    public virtual DbSet<tbTipoContrato> tbTipoContrato { get; set; }

    public virtual DbSet<tbTipoIdentificacion> tbTipoIdentificacion { get; set; }

    public virtual DbSet<tbTipoImagen> tbTipoImagen { get; set; }

    public virtual DbSet<tbTipoPago> tbTipoPago { get; set; }

    public virtual DbSet<tbTipoReaccion> tbTipoReaccion { get; set; }

    public virtual DbSet<tbTipoTelefono> tbTipoTelefono { get; set; }

    public virtual DbSet<tbTipoToken> tbTipoToken { get; set; }

    public virtual DbSet<tbTipoTransaccion> tbTipoTransaccion { get; set; }

    public virtual DbSet<tbTipoUsuario> tbTipoUsuario { get; set; }

    public virtual DbSet<tbTitulo> tbTitulo { get; set; }

    public virtual DbSet<tbTituloProc> tbTituloProc { get; set; }

    public virtual DbSet<tbTransaccion> tbTransaccion { get; set; }

    public virtual DbSet<tbUbicacion> tbUbicacion { get; set; }

    public virtual DbSet<tbUsuarioTelefono> tbUsuarioTelefono { get; set; }

    public virtual DbSet<tbUsuarios> tbUsuarios { get; set; }

    public virtual DbSet<tbUsuariosClaims> tbUsuariosClaims { get; set; }

    public virtual DbSet<tbUsuariosTokens> tbUsuariosTokens { get; set; }

    public virtual DbSet<tbVacante> tbVacante { get; set; }

    public virtual DbSet<tbVentaRelampago> tbVentaRelampago { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<tbAlquilerServicios>(entity =>
        {
            entity.HasKey(e => e.alq_Id).HasName("PK_Genl_tbAlquilerServicios_alq_Id");

            entity.ToTable("tbAlquilerServicios", "Genl");

            entity.Property(e => e.alq_Id).ValueGeneratedNever();
            entity.Property(e => e.alq_Descripcion)
                .IsRequired()
                .HasMaxLength(300);
            entity.Property(e => e.alq_Precio).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.alq_Titulo)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.estAlq).WithMany(p => p.tbAlquilerServicios)
                .HasForeignKey(d => d.estAlq_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbAlquilerServicios_tbEstadoAlquilerServicios_estAlq_Id");

            entity.HasOne(d => d.tiemp).WithMany(p => p.tbAlquilerServicios)
                .HasForeignKey(d => d.tiemp_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbAlquilerServicios_tbTiempo_tiemp_Id");

            entity.HasOne(d => d.tran).WithMany(p => p.tbAlquilerServicios)
                .HasForeignKey(d => d.tran_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbAlquilerServicios_tbTransaccion_tran_Id");

            entity.HasOne(d => d.user).WithMany(p => p.tbAlquilerServicios)
                .HasForeignKey(d => d.user_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbAlquilerServicios_tbUsuarios_user_Id");
        });

        modelBuilder.Entity<tbAlquilerServiciosPorFactura>(entity =>
        {
            entity.HasKey(e => e.facDet_Id).HasName("PK_Genl_tbAlquilerServiciosPorFactura_facDet_Id");

            entity.ToTable("tbAlquilerServiciosPorFactura", "Genl");

            entity.Property(e => e.facDet_Id).ValueGeneratedNever();

            entity.HasOne(d => d.alq).WithMany(p => p.tbAlquilerServiciosPorFactura)
                .HasForeignKey(d => d.alq_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbAlquilerServiciosPorFactura_tbAlquilerServicios_alq_Id");

            entity.HasOne(d => d.facDet).WithOne(p => p.tbAlquilerServiciosPorFactura)
                .HasForeignKey<tbAlquilerServiciosPorFactura>(d => d.facDet_Id)
                .HasConstraintName("FK_Genl_tbAlquilerServiciosPorFactura_tbFacturaDetalle_facDet_Id");
        });

        modelBuilder.Entity<tbAriaPuesto>(entity =>
        {
            entity.HasKey(e => e.ariaP_Id).HasName("PK_Genl_tbAriaPuesto_ariaP_Id");

            entity.ToTable("tbAriaPuesto", "Genl");

            entity.Property(e => e.ariaP_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ariaP_Descripcion)
                .IsRequired()
                .HasMaxLength(300);
        });

        modelBuilder.Entity<tbCargo>(entity =>
        {
            entity.HasKey(e => e.carg_Id).HasName("PK_Genl_tbCargo_carg_Id");

            entity.ToTable("tbCargo", "Genl");

            entity.Property(e => e.carg_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.carg_Descripcion)
                .IsRequired()
                .HasMaxLength(300);

            entity.HasOne(d => d.vac).WithMany(p => p.tbCargo)
                .HasForeignKey(d => d.vac_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbCargo_tbVacante_vac_Id");
        });

        modelBuilder.Entity<tbCatalogoImagen>(entity =>
        {
            entity.HasKey(e => e.catImg_Id).HasName("PK_Genl_tbCatalogoImagen_catImg_Id");

            entity.ToTable("tbCatalogoImagen", "Genl");

            entity.Property(e => e.catImg_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.catImg_Ruta)
                .IsRequired()
                .HasMaxLength(300)
                .HasDefaultValue("");

            entity.HasOne(d => d.tipImg).WithMany(p => p.tbCatalogoImagen)
                .HasForeignKey(d => d.tipImg_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbCatalogoImagen_tbTipoImagen_tipImg_Id");

            entity.HasOne(d => d.tran).WithMany(p => p.tbCatalogoImagen)
                .HasForeignKey(d => d.tran_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbCatalogoImagen_tbTransaccion_tran_Id");
        });

        modelBuilder.Entity<tbCatalogoPorUsuario>(entity =>
        {
            entity.HasKey(e => e.catUsua_Id).HasName("PK_Genl_tbCatalogoPorUsuario_catUsua_Id");

            entity.ToTable("tbCatalogoPorUsuario", "Genl");

            entity.Property(e => e.catUsua_Id).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.tipCatg).WithMany(p => p.tbCatalogoPorUsuario)
                .HasForeignKey(d => d.tipCatg_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbCatalogoPorUsuario_tbTipoCatalogo_tipCatg_Id");

            entity.HasOne(d => d.tipUs).WithMany(p => p.tbCatalogoPorUsuario)
                .HasForeignKey(d => d.tipUs_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbCatalogoPorUsuario_tbTipoUsuario_tipUs_Id");
        });

        modelBuilder.Entity<tbCategoria>(entity =>
        {
            entity.HasKey(e => e.catg_Id).HasName("PK_Genl_tbCategoria_catg_Id");

            entity.ToTable("tbCategoria", "Genl");

            entity.Property(e => e.catg_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.catg_Nombre)
                .IsRequired()
                .HasMaxLength(500);
        });

        modelBuilder.Entity<tbCategoriaItem>(entity =>
        {
            entity.HasKey(e => e.catgItem_Id).HasName("PK_Genl_tbCategoriaItem_catgItem_Id");

            entity.ToTable("tbCategoriaItem", "Genl");

            entity.Property(e => e.catgItem_Id).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.catg).WithMany(p => p.tbCategoriaItem)
                .HasForeignKey(d => d.catg_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbCategoriaItem_tbCategoria_catg_Id");

            entity.HasOne(d => d.user).WithMany(p => p.tbCategoriaItem)
                .HasForeignKey(d => d.user_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbCategoriaItem_tbUsuarios_user_Id");
        });

        modelBuilder.Entity<tbCategoriaLugar>(entity =>
        {
            entity.HasKey(e => e.catLug_Id).HasName("PK_Genl_tbCategoriaLugar_catLug_Id");

            entity.ToTable("tbCategoriaLugar", "Genl");

            entity.Property(e => e.catLug_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.catLug_Nombre)
                .IsRequired()
                .HasMaxLength(500);
        });

        modelBuilder.Entity<tbCategoriaPorAlquilar>(entity =>
        {
            entity.HasKey(e => new { e.subCat_Id, e.alq_Id }).HasName("PK_Genl_tbCategoriaPorAlquilar_subCat_Id_alq_Id");

            entity.ToTable("tbCategoriaPorAlquilar", "Genl");

            entity.HasOne(d => d.alq).WithMany(p => p.tbCategoriaPorAlquilar)
                .HasForeignKey(d => d.alq_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbCategoriaPorAlquilar_tbAlquilerServicios_alq_Id");

            entity.HasOne(d => d.subCat).WithMany(p => p.tbCategoriaPorAlquilar)
                .HasForeignKey(d => d.subCat_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbCategoriaPorAlquilar_tbSubCategoria_subCat_Id");
        });

        modelBuilder.Entity<tbCategoriaPorHabilidad>(entity =>
        {
            entity.HasKey(e => new { e.subCat_Id, e.hab_Id }).HasName("PK_Genl_tbCategoriaPorHabilidad_subCat_Id_hab_Id");

            entity.ToTable("tbCategoriaPorHabilidad", "Genl");

            entity.HasOne(d => d.hab).WithMany(p => p.tbCategoriaPorHabilidad)
                .HasForeignKey(d => d.hab_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbCategoriaPorHabilidad_tbHabilidad_hab_Id");

            entity.HasOne(d => d.subCat).WithMany(p => p.tbCategoriaPorHabilidad)
                .HasForeignKey(d => d.subCat_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbCategoriaPorHabilidad_tbSubCategoria_subCat_Id");
        });

        modelBuilder.Entity<tbCategoriaPorNecesidad>(entity =>
        {
            entity.HasKey(e => new { e.subCat_Id, e.necs_Id }).HasName("PK_Genl_tbCategoriaPorNecesidad_subCat_Id_necs_Id");

            entity.ToTable("tbCategoriaPorNecesidad", "Genl");

            entity.HasOne(d => d.necs).WithMany(p => p.tbCategoriaPorNecesidad)
                .HasForeignKey(d => d.necs_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbCategoriaPorNecesidad_tbNecesitan_necs_Id");

            entity.HasOne(d => d.subCat).WithMany(p => p.tbCategoriaPorNecesidad)
                .HasForeignKey(d => d.subCat_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbCategoriaPorNecesidad_tbSubCategoria_subCat_Id");
        });

        modelBuilder.Entity<tbCategoriaPorProducto>(entity =>
        {
            entity.HasKey(e => new { e.subCat_Id, e.prod_Id }).HasName("PK_Genl_tbCategoriaPorProducto_subCat_Id_prod_Id");

            entity.ToTable("tbCategoriaPorProducto", "Genl");

            entity.HasOne(d => d.prod).WithMany(p => p.tbCategoriaPorProducto)
                .HasForeignKey(d => d.prod_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbCategoriaPorProducto_tbProducto_prod_Id");

            entity.HasOne(d => d.subCat).WithMany(p => p.tbCategoriaPorProducto)
                .HasForeignKey(d => d.subCat_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbCategoriaPorProducto_tbSubCategoria_subCat_Id");
        });

        modelBuilder.Entity<tbCategoriaPorServicio>(entity =>
        {
            entity.HasKey(e => new { e.subCat_Id, e.serv_Id }).HasName("PK_Genl_tbCategoriaPorServicio_subCat_Id_serv_Id");

            entity.ToTable("tbCategoriaPorServicio", "Genl");

            entity.HasOne(d => d.serv).WithMany(p => p.tbCategoriaPorServicio)
                .HasForeignKey(d => d.serv_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbCategoriaPorServicio_tbServicio_serv_Id");

            entity.HasOne(d => d.subCat).WithMany(p => p.tbCategoriaPorServicio)
                .HasForeignKey(d => d.subCat_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbCategoriaPorServicio_tbSubCategoria_subCat_Id");
        });

        modelBuilder.Entity<tbCategoriaPorVenta>(entity =>
        {
            entity.HasKey(e => new { e.subCat_Id, e.ventR_Id }).HasName("PK_Genl_tbCategoriaPorVenta_subCat_Id_ventR_Id");

            entity.ToTable("tbCategoriaPorVenta", "Genl");

            entity.HasOne(d => d.subCat).WithMany(p => p.tbCategoriaPorVenta)
                .HasForeignKey(d => d.subCat_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbCategoriaPorVenta_tbSubCategoria_subCat_Id");

            entity.HasOne(d => d.ventR).WithMany(p => p.tbCategoriaPorVenta)
                .HasForeignKey(d => d.ventR_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbCategoriaPorVenta_tbVentaRelampago_ventR_Id");
        });

        modelBuilder.Entity<tbCategoriaReaccion>(entity =>
        {
            entity.HasKey(e => e.catReac_Id).HasName("PK_Genl_tbCategoriaReaccion_catReac_Id");

            entity.ToTable("tbCategoriaReaccion", "Genl");

            entity.Property(e => e.catReac_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.catReac_Descripcion)
                .IsRequired()
                .HasMaxLength(300)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<tbCategoriaSubdivicion>(entity =>
        {
            entity.HasKey(e => e.catSub_Id).HasName("PK_Genl_tbCategoriaSubdivicion_catSub_Id");

            entity.ToTable("tbCategoriaSubdivicion", "Genl");

            entity.Property(e => e.catSub_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.catSub_Nombre)
                .IsRequired()
                .HasMaxLength(500);
        });

        modelBuilder.Entity<tbConfiguracion>(entity =>
        {
            entity.HasKey(e => e.conf_Id).HasName("PK_Genl_tbConfiguracion_conf_Id");

            entity.ToTable("tbConfiguracion", "Genl");

            entity.HasIndex(e => e.conf_Nombre, "UQ_Genl_tbConfiguracion_conf_Nombre").IsUnique();

            entity.Property(e => e.conf_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.conf_Descripcion)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.conf_Nombre)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.conf_Valor)
                .IsRequired()
                .HasMaxLength(500);
        });

        modelBuilder.Entity<tbDepartamento>(entity =>
        {
            entity.HasKey(e => e.dept_Id).HasName("PK_Genl_tbDepartamento_dept_Id");

            entity.ToTable("tbDepartamento", "Genl");

            entity.Property(e => e.dept_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.dept_Nombre)
                .IsRequired()
                .HasMaxLength(500);

            entity.HasOne(d => d.pais).WithMany(p => p.tbDepartamento)
                .HasForeignKey(d => d.pais_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbDepartamento_tbPais_pai_Id");
        });

        modelBuilder.Entity<tbDesperdicio>(entity =>
        {
            entity.HasKey(e => e.desp_Id).HasName("PK_Genl_tbDesperdicio_desp_Id");

            entity.ToTable("tbDesperdicio", "Genl");

            entity.Property(e => e.desp_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.desp_Descripcion)
                .IsRequired()
                .HasMaxLength(1000)
                .HasDefaultValue("");
            entity.Property(e => e.desp_Gratis).HasDefaultValue(true);
            entity.Property(e => e.desp_Nombre)
                .IsRequired()
                .HasMaxLength(300)
                .HasDefaultValue("");
            entity.Property(e => e.serv_FechaCreacion).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.tran).WithMany(p => p.tbDesperdicio)
                .HasForeignKey(d => d.tran_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbDesperdicio_tbTransaccion_tran_Id");

            entity.HasOne(d => d.user).WithMany(p => p.tbDesperdicio)
                .HasForeignKey(d => d.user_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbDesperdicio_tbUsuarios_user_Id");

            entity.HasMany(d => d.prod).WithMany(p => p.desp)
                .UsingEntity<Dictionary<string, object>>(
                    "tbDesperdicioProducto",
                    r => r.HasOne<tbProducto>().WithMany()
                        .HasForeignKey("prod_Id")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Genl_tbDesperdicioProducto_tbProducto_prod_Id"),
                    l => l.HasOne<tbDesperdicio>().WithMany()
                        .HasForeignKey("desp_Id")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Genl_tbDesperdicioProducto_tbDesperdicio_desp_Id"),
                    j =>
                    {
                        j.HasKey("desp_Id", "prod_Id").HasName("PK_Genl_tbDesperdicioProducto_desp_Id_prod_Id");
                        j.ToTable("tbDesperdicioProducto", "Genl");
                    });

            entity.HasMany(d => d.serv).WithMany(p => p.desp)
                .UsingEntity<Dictionary<string, object>>(
                    "tbDesperdicioServicio",
                    r => r.HasOne<tbServicio>().WithMany()
                        .HasForeignKey("serv_Id")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Genl_tbDesperdicioServicio_tbServicio_serv_Id"),
                    l => l.HasOne<tbDesperdicio>().WithMany()
                        .HasForeignKey("desp_Id")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Genl_tbDesperdicioServicio_tbDesperdicio_desp_Id"),
                    j =>
                    {
                        j.HasKey("desp_Id", "serv_Id").HasName("PK_Genl_tbDesperdicioServicio_desp_Id_serv_Id");
                        j.ToTable("tbDesperdicioServicio", "Genl");
                    });
        });

        modelBuilder.Entity<tbDesperdicioPorFactura>(entity =>
        {
            entity.HasKey(e => e.facDet_Id).HasName("PK_Genl_tbDesperdicioPorFactura_facDet_Id");

            entity.ToTable("tbDesperdicioPorFactura", "Genl");

            entity.Property(e => e.facDet_Id).ValueGeneratedNever();

            entity.HasOne(d => d.desp).WithMany(p => p.tbDesperdicioPorFactura)
                .HasForeignKey(d => d.desp_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbDesperdicioPorFactura_tbDesperdicio_desp_Id");

            entity.HasOne(d => d.facDet).WithOne(p => p.tbDesperdicioPorFactura)
                .HasForeignKey<tbDesperdicioPorFactura>(d => d.facDet_Id)
                .HasConstraintName("FK_Genl_tbDesperdicioPorFactura_tbFacturaDetalle_facDet_Id");
        });

        modelBuilder.Entity<tbEducacion>(entity =>
        {
            entity.HasKey(e => e.ed_Id).HasName("PK_Genl_tbEducacion_catEd_Id");

            entity.ToTable("tbEducacion", "Genl");

            entity.Property(e => e.ed_Id).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.titu).WithMany(p => p.tbEducacion)
                .HasForeignKey(d => d.titu_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbEducacion_tbTitulo_titu_Id");

            entity.HasOne(d => d.vac).WithMany(p => p.tbEducacion)
                .HasForeignKey(d => d.vac_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbEducacion_tbVacante_vac_Id");
        });

        modelBuilder.Entity<tbEstadoAlquilerServicios>(entity =>
        {
            entity.HasKey(e => e.estAlq_Id).HasName("PK_Genl_tbEstadoAlquilerServicios_estAlq_Id");

            entity.ToTable("tbEstadoAlquilerServicios", "Genl");

            entity.Property(e => e.estAlq_Id).ValueGeneratedNever();
            entity.Property(e => e.estAlq_Descripcion)
                .IsRequired()
                .HasMaxLength(300);
        });

        modelBuilder.Entity<tbEstadoEvento>(entity =>
        {
            entity.HasKey(e => e.EstEven_Id).HasName("PK_Genl_tbEstadoEvento_hab_Id");

            entity.ToTable("tbEstadoEvento", "Genl");

            entity.Property(e => e.EstEven_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.EstEven_Descripcion)
                .IsRequired()
                .HasMaxLength(300)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<tbEvento>(entity =>
        {
            entity.HasKey(e => e.even_Id).HasName("PK_Genl_tbEvento_even_Id");

            entity.ToTable("tbEvento", "Genl");

            entity.Property(e => e.even_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.even_Descripcion)
                .IsRequired()
                .HasMaxLength(1000)
                .HasDefaultValue("");
            entity.Property(e => e.even_FechaFin).HasColumnType("datetime");
            entity.Property(e => e.even_FechaInicio).HasColumnType("datetime");
            entity.Property(e => e.even_Titulo)
                .IsRequired()
                .HasMaxLength(300)
                .HasDefaultValue("");

            entity.HasOne(d => d.EstEven).WithMany(p => p.tbEvento)
                .HasForeignKey(d => d.EstEven_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbEvento_tbEstadoEvento_EstEven_Id");

            entity.HasOne(d => d.tran).WithMany(p => p.tbEvento)
                .HasForeignKey(d => d.tran_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbEvento_tbTransaccion_tran_Id");

            entity.HasOne(d => d.ubc).WithMany(p => p.tbEvento)
                .HasForeignKey(d => d.ubc_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbEvento_tbUbicacion_ubc_Id");

            entity.HasOne(d => d.user).WithMany(p => p.tbEvento)
                .HasForeignKey(d => d.user_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbEvento_tbUsuarios_user_Id");
        });

        modelBuilder.Entity<tbExperiencia>(entity =>
        {
            entity.HasKey(e => e.exp_Id).HasName("PK_Genl_tbExperiencia_exp_Id");

            entity.ToTable("tbExperiencia", "Genl");

            entity.Property(e => e.exp_Id).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.ariaP).WithMany(p => p.tbExperiencia)
                .HasForeignKey(d => d.ariaP_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbExperiencia_tbAriaPuesto_ariaP_Id");

            entity.HasOne(d => d.vac).WithMany(p => p.tbExperiencia)
                .HasForeignKey(d => d.vac_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbExperiencia_tbVacante_vac_Id");
        });

        modelBuilder.Entity<tbFactura>(entity =>
        {
            entity.HasKey(e => e.fac_Id).HasName("PK_Genl_tbFactura_fac_Id");

            entity.ToTable("tbFactura", "Genl");

            entity.Property(e => e.fac_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.fac_Descuento).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.fac_FacturaCAI)
                .IsRequired()
                .HasMaxLength(350)
                .HasDefaultValue("");
            entity.Property(e => e.fac_Fecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.fac_FechaCreacio)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.fac_Impuesto).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.fac_NombreCliente)
                .IsRequired()
                .HasMaxLength(350)
                .HasDefaultValue("");
            entity.Property(e => e.fac_PorcentajeImpuestos).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.fac_RTN)
                .IsRequired()
                .HasMaxLength(350)
                .HasDefaultValue("");
            entity.Property(e => e.fac_SubTotal).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.fac_TotalPagar).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.tipPag).WithMany(p => p.tbFactura)
                .HasForeignKey(d => d.tipPag_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbFactura_tbTipoPago_tipPag_Id");

            entity.HasOne(d => d.tran).WithMany(p => p.tbFactura)
                .HasForeignKey(d => d.tran_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbFactura_tbTransaccion_tran_Id");

            entity.HasOne(d => d.user).WithMany(p => p.tbFacturauser)
                .HasForeignKey(d => d.user_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbFactura_tbUsuarios_user_Id");

            entity.HasOne(d => d.user_IdClienteNavigation).WithMany(p => p.tbFacturauser_IdClienteNavigation)
                .HasForeignKey(d => d.user_IdCliente)
                .HasConstraintName("FK_Genl_tbFactura_tbUsuarios_user_IdCliente");
        });

        modelBuilder.Entity<tbFacturaDetalle>(entity =>
        {
            entity.HasKey(e => e.facDet_Id).HasName("PK_Genl_tbFacturaDetalle_facDet_Id");

            entity.ToTable("tbFacturaDetalle", "Genl");

            entity.Property(e => e.facDet_Id).ValueGeneratedNever();
            entity.Property(e => e.facDet_Cantidad).HasDefaultValue(1);
            entity.Property(e => e.facDet_Codigo)
                .IsRequired()
                .HasMaxLength(350)
                .HasDefaultValue("");
            entity.Property(e => e.facDet_Descripcion)
                .IsRequired()
                .HasMaxLength(350)
                .HasDefaultValue("");
            entity.Property(e => e.facDet_Descuento).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.facDet_Impuesto).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.facDet_PorcentajeImpuestos).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.facDet_PrecioUnitario).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.facDet_TotalPagar).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.fac).WithMany(p => p.tbFacturaDetalle)
                .HasForeignKey(d => d.fac_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbFacturaDetalle_tbFactura_fac_Id");

            entity.HasOne(d => d.tipCatg).WithMany(p => p.tbFacturaDetalle)
                .HasForeignKey(d => d.tipCatg_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbFacturaDetalle_tbTipoCatalogo_tipCatg_Id");
        });

        modelBuilder.Entity<tbFiltroCategoriaTipo>(entity =>
        {
            entity.HasKey(e => e.fiCg_Id).HasName("PK_Genl_tbFiltroCategoriaTipo_fiCg_Id");

            entity.ToTable("tbFiltroCategoriaTipo", "Genl");

            entity.Property(e => e.fiCg_Id).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.catg).WithMany(p => p.tbFiltroCategoriaTipo)
                .HasForeignKey(d => d.catg_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbFiltroCategoriaTipo_tbCategoria_catg_Id");

            entity.HasOne(d => d.tipCatg).WithMany(p => p.tbFiltroCategoriaTipo)
                .HasForeignKey(d => d.tipCatg_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbFiltroCategoriaTipo_tbTipoCatalogo_tipCatg_Id");
        });

        modelBuilder.Entity<tbGenero>(entity =>
        {
            entity.HasKey(e => e.gene_Id).HasName("PK_Genl_tbGenero_gene_Id");

            entity.ToTable("tbGenero", "Genl");

            entity.Property(e => e.gene_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.gene_Descripcion)
                .IsRequired()
                .HasMaxLength(300);
        });

        modelBuilder.Entity<tbHabilidad>(entity =>
        {
            entity.HasKey(e => e.hab_Id).HasName("PK_Genl_tbHabilidad_hab_Id");

            entity.ToTable("tbHabilidad", "Genl");

            entity.Property(e => e.hab_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.hab_Descripcion)
                .IsRequired()
                .HasMaxLength(1000)
                .HasDefaultValue("");
            entity.Property(e => e.hab_Precio)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)");
            entity.Property(e => e.hab_Titulo)
                .IsRequired()
                .HasMaxLength(300)
                .HasDefaultValue("");

            entity.HasOne(d => d.tran).WithMany(p => p.tbHabilidad)
                .HasForeignKey(d => d.tran_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbHabilidad_tbTransaccion_tran_Id");

            entity.HasOne(d => d.user).WithMany(p => p.tbHabilidad)
                .HasForeignKey(d => d.user_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbHabilidad_tbUsuarios_user_Id");
        });

        modelBuilder.Entity<tbHabilidadPorFactura>(entity =>
        {
            entity.HasKey(e => e.facDet_Id).HasName("PK_Genl_tbHabilidadPorFactura_facDet_Id");

            entity.ToTable("tbHabilidadPorFactura", "Genl");

            entity.Property(e => e.facDet_Id).ValueGeneratedNever();

            entity.HasOne(d => d.facDet).WithOne(p => p.tbHabilidadPorFactura)
                .HasForeignKey<tbHabilidadPorFactura>(d => d.facDet_Id)
                .HasConstraintName("FK_Genl_tbHabilidadPorFactura_tbFacturaDetalle_facDet_Id");

            entity.HasOne(d => d.hab).WithMany(p => p.tbHabilidadPorFactura)
                .HasForeignKey(d => d.hab_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbHabilidadPorFactura_tbHabilidad_hab_Id");
        });

        modelBuilder.Entity<tbHorario>(entity =>
        {
            entity.HasKey(e => e.hor_Id).HasName("PK_Genl_tbHorario_hor_Id");

            entity.ToTable("tbHorario", "Genl");

            entity.Property(e => e.hor_Id).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.user).WithMany(p => p.tbHorario)
                .HasForeignKey(d => d.user_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbHorario_tbUsuarios_User_Id");
        });

        modelBuilder.Entity<tbIdioma>(entity =>
        {
            entity.HasKey(e => e.idio_Id).HasName("PK_Genl_tbIdioma_idio_Id");

            entity.ToTable("tbIdioma", "Genl");

            entity.Property(e => e.idio_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.idio_Descripcion)
                .IsRequired()
                .HasMaxLength(300);
        });

        modelBuilder.Entity<tbIdiomaItem>(entity =>
        {
            entity.HasKey(e => e.idItm_Id).HasName("PK_Genl_tbIdiomaItem_idItm_Id");

            entity.ToTable("tbIdiomaItem", "Genl");

            entity.Property(e => e.idItm_Id).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.idio).WithMany(p => p.tbIdiomaItem)
                .HasForeignKey(d => d.idio_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbIdiomaItem_tbIdioma_idio_Id");

            entity.HasOne(d => d.vac).WithMany(p => p.tbIdiomaItem)
                .HasForeignKey(d => d.vac_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbIdiomaItem_tbVacante_vac_Id");
        });

        modelBuilder.Entity<tbInfoUnicaUsuario>(entity =>
        {
            entity.HasKey(e => e.usInf_Id).HasName("PK_Genl_tbInfoUnicaUsuario_usInf_Id");

            entity.ToTable("tbInfoUnicaUsuario", "Genl");

            entity.Property(e => e.usInf_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.usInf_IgualSubInfo).HasDefaultValue(true);
            entity.Property(e => e.usInf_Nombre)
                .IsRequired()
                .HasMaxLength(300);
            entity.Property(e => e.usInf_RutaLogo)
                .IsRequired()
                .HasMaxLength(2000)
                .HasDefaultValue("");
            entity.Property(e => e.usInf_RutaPaginaWed)
                .IsRequired()
                .HasMaxLength(2000)
                .HasDefaultValue("");

            entity.HasOne(d => d.tipUs).WithMany(p => p.tbInfoUnicaUsuario)
                .HasForeignKey(d => d.tipUs_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbInfoUnicaUsuario_tbTipoUsuario_tipUs_Id");
        });

        modelBuilder.Entity<tbLogroEventoCategoria>(entity =>
        {
            entity.HasKey(e => e.logCa_Id).HasName("PK_Genl_tbLogroEventoCategoria_logCa_Id");

            entity.ToTable("tbLogroEventoCategoria", "Genl");

            entity.Property(e => e.logCa_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.logCa_Descripcion)
                .IsRequired()
                .HasMaxLength(300);
        });

        modelBuilder.Entity<tbLugar>(entity =>
        {
            entity.HasKey(e => e.lug_Id).HasName("PK_Genl_tbLugar_lug_Id");

            entity.ToTable("tbLugar", "Genl");

            entity.Property(e => e.lug_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.lug_Nombre)
                .IsRequired()
                .HasMaxLength(500);

            entity.HasOne(d => d.catLug).WithMany(p => p.tbLugar)
                .HasForeignKey(d => d.catLug_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbLugar_tbCategoriaLugar_catLug_Id");

            entity.HasOne(d => d.muni).WithMany(p => p.tbLugar)
                .HasForeignKey(d => d.muni_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbLugar_tbMunicipio_muni_Id");
        });

        modelBuilder.Entity<tbMunicipio>(entity =>
        {
            entity.HasKey(e => e.muni_Id).HasName("PK_Genl_tbMunicipio_muni_Id");

            entity.ToTable("tbMunicipio", "Genl");

            entity.Property(e => e.muni_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.muni_Nombre)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.muni_ValidaciosTelefono)
                .IsRequired()
                .HasMaxLength(1000)
                .HasDefaultValue("");
            entity.Property(e => e.muni_ValidaciosTelefonoFijo)
                .IsRequired()
                .HasMaxLength(1000)
                .HasDefaultValue("");

            entity.HasOne(d => d.dept).WithMany(p => p.tbMunicipio)
                .HasForeignKey(d => d.dept_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbMunicipio_tbDepartamento_dept_Id");
        });

        modelBuilder.Entity<tbNecesitan>(entity =>
        {
            entity.HasKey(e => e.necs_Id).HasName("PK_Genl_tbNecesitan_necs_Id");

            entity.ToTable("tbNecesitan", "Genl");

            entity.Property(e => e.necs_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.necs_Descripcion)
                .IsRequired()
                .HasMaxLength(1000)
                .HasDefaultValue("");
            entity.Property(e => e.necs_Nombre)
                .IsRequired()
                .HasMaxLength(300)
                .HasDefaultValue("");

            entity.HasOne(d => d.tran).WithMany(p => p.tbNecesitan)
                .HasForeignKey(d => d.tran_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbNecesitan_tbTransaccion_tran_Id");

            entity.HasOne(d => d.user).WithMany(p => p.tbNecesitan)
                .HasForeignKey(d => d.user_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbNecesitan_tbUsuarios_user_Id");
        });

        modelBuilder.Entity<tbNivelEducativo>(entity =>
        {
            entity.HasKey(e => e.nivEd_Id).HasName("PK_Genl_tbNivelEducativo_nivEd_Id");

            entity.ToTable("tbNivelEducativo", "Genl");

            entity.Property(e => e.nivEd_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.nivEd_Descripcion)
                .IsRequired()
                .HasMaxLength(300);
        });

        modelBuilder.Entity<tbOrigen>(entity =>
        {
            entity.HasKey(e => e.origen_Id).HasName("PK_Genl_tbOrigen_origen_Id");

            entity.ToTable("tbOrigen", "Genl");

            entity.Property(e => e.origen_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.origen_Descripcion)
                .IsRequired()
                .HasMaxLength(1000)
                .HasDefaultValue("");

            entity.HasOne(d => d.prod).WithMany(p => p.tbOrigen)
                .HasForeignKey(d => d.prod_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbOrigen_tbProducto_prod_Id");

            entity.HasOne(d => d.tran).WithMany(p => p.tbOrigen)
                .HasForeignKey(d => d.tran_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbOrigen_tbTransaccion_tipCatg_Id");

            entity.HasMany(d => d.user).WithMany(p => p.origen)
                .UsingEntity<Dictionary<string, object>>(
                    "tbContribuyente",
                    r => r.HasOne<tbUsuarios>().WithMany()
                        .HasForeignKey("user_Id")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Genl_tbContribuyente_tbUsuarios_user_Id"),
                    l => l.HasOne<tbOrigen>().WithMany()
                        .HasForeignKey("origen_Id")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Genl_tbContribuyente_tbOrigen_origen_Id"),
                    j =>
                    {
                        j.HasKey("origen_Id", "user_Id").HasName("PK_Genl_tbContribuyente_origen_Id_user_Id");
                        j.ToTable("tbContribuyente", "Genl");
                    });
        });

        modelBuilder.Entity<tbOtrosConocimientos>(entity =>
        {
            entity.HasKey(e => e.otrCo_Id).HasName("PK_Genl_tbOtrosConocimientos_otrCo_Id");

            entity.ToTable("tbOtrosConocimientos", "Genl");

            entity.Property(e => e.otrCo_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.otrCo_Descripcion)
                .IsRequired()
                .HasMaxLength(300);

            entity.HasOne(d => d.vac).WithMany(p => p.tbOtrosConocimientos)
                .HasForeignKey(d => d.vac_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbOtrosConocimientos_tbVacante_vac_Id");
        });

        modelBuilder.Entity<tbPais>(entity =>
        {
            entity.HasKey(e => e.pais_Id).HasName("PK_Genl_tbPais_pais_Id");

            entity.ToTable("tbPais", "Genl");

            entity.Property(e => e.pais_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.pais_Abrebiatura)
                .IsRequired()
                .HasMaxLength(10)
                .HasDefaultValue("");
            entity.Property(e => e.pais_Nombre)
                .IsRequired()
                .HasMaxLength(500);
        });

        modelBuilder.Entity<tbPedido>(entity =>
        {
            entity.HasKey(e => e.ped_Id).HasName("PK_Genl_tbPedido_ped_Id");

            entity.ToTable("tbPedido", "Genl");

            entity.Property(e => e.ped_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ped_Descuento).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ped_Fecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ped_FechaCreacio)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ped_Impuesto).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ped_NombreCliente)
                .IsRequired()
                .HasMaxLength(350)
                .HasDefaultValue("");
            entity.Property(e => e.ped_PorcentajeImpuestos).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ped_RTN)
                .IsRequired()
                .HasMaxLength(350)
                .HasDefaultValue("");
            entity.Property(e => e.ped_SubTotal).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ped_TotalPagar).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.tran).WithMany(p => p.tbPedido)
                .HasForeignKey(d => d.tran_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbPedido_tbTransaccion_tran_Id");

            entity.HasOne(d => d.user).WithMany(p => p.tbPedidouser)
                .HasForeignKey(d => d.user_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbPedido_tbUsuarios_user_Id");

            entity.HasOne(d => d.user_IdClienteNavigation).WithMany(p => p.tbPedidouser_IdClienteNavigation)
                .HasForeignKey(d => d.user_IdCliente)
                .HasConstraintName("FK_Genl_tbPedido_tbUsuarios_user_IdCliente");
        });

        modelBuilder.Entity<tbPedidoDetalle>(entity =>
        {
            entity.HasKey(e => e.pedDet_Id).HasName("PK_Genl_tbPedidoDetalle_pedDet_Id");

            entity.ToTable("tbPedidoDetalle", "Genl");

            entity.Property(e => e.pedDet_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.pedDet_Cantidad).HasDefaultValue(1);
            entity.Property(e => e.pedDet_Codigo)
                .IsRequired()
                .HasMaxLength(350)
                .HasDefaultValue("");
            entity.Property(e => e.pedDet_Descripcion)
                .IsRequired()
                .HasMaxLength(350)
                .HasDefaultValue("");
            entity.Property(e => e.pedDet_Descuento).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.pedDet_Impuesto).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.pedDet_PorcentajeImpuestos).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.pedDet_PrecioUnitario).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.pedDet_TotalPagar).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.ped).WithMany(p => p.tbPedidoDetalle)
                .HasForeignKey(d => d.ped_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbPedidoDetalle_tbPedido_ped_Id");

            entity.HasOne(d => d.tipCatg).WithMany(p => p.tbPedidoDetalle)
                .HasForeignKey(d => d.tipCatg_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbPedidoDetalle_tbTipoCatalogo_tipCatg_Id");
        });

        modelBuilder.Entity<tbPrecioProducto>(entity =>
        {
            entity.HasKey(e => e.prodPrec_Id).HasName("PK_Genl_tbPrecioProducto_prodPrec_Id");

            entity.ToTable("tbPrecioProducto", "Genl");

            entity.Property(e => e.prodPrec_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.prodPrec_Descuento).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.prodPrec_FechaFinDescuento).HasColumnType("datetime");
            entity.Property(e => e.prodPrec_FechaInicioDescuento).HasColumnType("datetime");
            entity.Property(e => e.prodPrec_Precio).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.prod).WithMany(p => p.tbPrecioProducto)
                .HasForeignKey(d => d.prod_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbPrecioProducto_tbProducto_prod_Id");
        });

        modelBuilder.Entity<tbProceso>(entity =>
        {
            entity.HasKey(e => e.proc_Id).HasName("PK_Genl_tbProceso_proc");

            entity.ToTable("tbProceso", "Genl");

            entity.Property(e => e.proc_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.proc_Descripcion)
                .IsRequired()
                .HasMaxLength(300);
        });

        modelBuilder.Entity<tbProducto>(entity =>
        {
            entity.HasKey(e => e.prod_Id).HasName("PK_Genl_tbProducto_prod_Id");

            entity.ToTable("tbProducto", "Genl");

            entity.Property(e => e.prod_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.prod_ActoParaMenores).HasDefaultValue(true);
            entity.Property(e => e.prod_Descripcion)
                .IsRequired()
                .HasMaxLength(1000)
                .HasDefaultValue("");
            entity.Property(e => e.prod_FechaCreacion).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.prod_Nombre)
                .IsRequired()
                .HasMaxLength(300)
                .HasDefaultValue("");
            entity.Property(e => e.prod_Unidades).HasDefaultValue(1);

            entity.HasOne(d => d.tran).WithMany(p => p.tbProducto)
                .HasForeignKey(d => d.tran_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbProducto_tbTransaccion_tipCatg_Id");

            entity.HasOne(d => d.user).WithMany(p => p.tbProducto)
                .HasForeignKey(d => d.user_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbProducto_tbUsuarios_user_Id");
        });

        modelBuilder.Entity<tbProductoPorFactura>(entity =>
        {
            entity.HasKey(e => e.facDet_Id).HasName("PK_Genl_tbProductoPorFactura_facDet_Id");

            entity.ToTable("tbProductoPorFactura", "Genl");

            entity.Property(e => e.facDet_Id).ValueGeneratedNever();

            entity.HasOne(d => d.facDet).WithOne(p => p.tbProductoPorFactura)
                .HasForeignKey<tbProductoPorFactura>(d => d.facDet_Id)
                .HasConstraintName("FK_Genl_tbProductoPorFactura_tbFacturaDetalle_facDet_Id");

            entity.HasOne(d => d.prod).WithMany(p => p.tbProductoPorFactura)
                .HasForeignKey(d => d.prod_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbProductoPorFactura_tbProducto_prod_Id");
        });

        modelBuilder.Entity<tbProductoPorPedido>(entity =>
        {
            entity.HasKey(e => e.pedDet_Id).HasName("PK_Genl_tbProductoPorPedido_pedDet_Id");

            entity.ToTable("tbProductoPorPedido", "Genl");

            entity.Property(e => e.pedDet_Id).ValueGeneratedNever();

            entity.HasOne(d => d.pedDet).WithOne(p => p.tbProductoPorPedido)
                .HasForeignKey<tbProductoPorPedido>(d => d.pedDet_Id)
                .HasConstraintName("FK_Genl_tbPedidoDetalle_tbPedidoDetalle_pedDet_Id");

            entity.HasOne(d => d.prod).WithMany(p => p.tbProductoPorPedido)
                .HasForeignKey(d => d.prod_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbPedidoDetalle_tbProducto_prod_Id");
        });

        modelBuilder.Entity<tbPuesto>(entity =>
        {
            entity.HasKey(e => e.puest_Id).HasName("PK_Genl_tbPuesto_puest_Id");

            entity.ToTable("tbPuesto", "Genl");

            entity.Property(e => e.puest_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.puest_Descripcion)
                .IsRequired()
                .HasMaxLength(300);

            entity.HasOne(d => d.ariaP).WithMany(p => p.tbPuesto)
                .HasForeignKey(d => d.ariaP_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbPuesto_tbAriaPuesto_ariaP_Id");
        });

        modelBuilder.Entity<tbReaccion>(entity =>
        {
            entity.HasKey(e => e.reac_Id).HasName("PK_Genl_tbReaccion_reac_Id");

            entity.ToTable("tbReaccion", "Genl");

            entity.Property(e => e.reac_Id).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.tipReac).WithMany(p => p.tbReaccion)
                .HasForeignKey(d => d.tipReac_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbReaccion_tbTipoReaccion_tipReac_Id");

            entity.HasOne(d => d.tran).WithMany(p => p.tbReaccion)
                .HasForeignKey(d => d.tran_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbReaccion_tbTransaccion_tran_Id");

            entity.HasOne(d => d.user).WithMany(p => p.tbReaccion)
                .HasForeignKey(d => d.user_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbReaccion_tbUsuarios_user_Id");
        });

        modelBuilder.Entity<tbRoles>(entity =>
        {
            entity.HasKey(e => e.rol_Id).HasName("PK_Genl_tbRoles_rol_Id");

            entity.ToTable("tbRoles", "Genl");

            entity.Property(e => e.rol_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.rol_Nombre)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.rol_NombreNormalizado)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<tbRolesClaims>(entity =>
        {
            entity.HasKey(e => e.rolClai_Id).HasName("PK_Genl_tbRolesClaims_rolClai_Id");

            entity.ToTable("tbRolesClaims", "Genl");

            entity.Property(e => e.rolClai_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.rolClai_Tipo)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.rolClai_Value)
                .IsRequired()
                .HasMaxLength(300);

            entity.HasOne(d => d.rol).WithMany(p => p.tbRolesClaims)
                .HasForeignKey(d => d.rol_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbRolesClaims_tbRoles_rol_Id");
        });

        modelBuilder.Entity<tbServicio>(entity =>
        {
            entity.HasKey(e => e.serv_Id).HasName("PK_Genl_tbServicio_serv_Id");

            entity.ToTable("tbServicio", "Genl");

            entity.Property(e => e.serv_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.serv_Descripcion)
                .IsRequired()
                .HasMaxLength(1000)
                .HasDefaultValue("");
            entity.Property(e => e.serv_FechaCreacion).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.serv_Nombre)
                .IsRequired()
                .HasMaxLength(300)
                .HasDefaultValue("");

            entity.HasOne(d => d.tran).WithMany(p => p.tbServicio)
                .HasForeignKey(d => d.tran_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbServicio_tbTransaccion_tipCatg_Id");

            entity.HasOne(d => d.user).WithMany(p => p.tbServicio)
                .HasForeignKey(d => d.user_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbServicio_tbUsuarios_user_Id");
        });

        modelBuilder.Entity<tbServicioPorFactura>(entity =>
        {
            entity.HasKey(e => e.facDet_Id).HasName("PK_Genl_tbServicioPorFactura_facDet_Id");

            entity.ToTable("tbServicioPorFactura", "Genl");

            entity.Property(e => e.facDet_Id).ValueGeneratedNever();

            entity.HasOne(d => d.facDet).WithOne(p => p.tbServicioPorFactura)
                .HasForeignKey<tbServicioPorFactura>(d => d.facDet_Id)
                .HasConstraintName("FK_Genl_tbServicioPorFactura_tbFacturaDetalle_facDet_Id");

            entity.HasOne(d => d.serv).WithMany(p => p.tbServicioPorFactura)
                .HasForeignKey(d => d.serv_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbServicioPorFactura_tbServicio_serv_Id");
        });

        modelBuilder.Entity<tbServicioPorPedido>(entity =>
        {
            entity.HasKey(e => e.pedDet_Id).HasName("PK_Genl_tbServicioPorPedido_pedDet_Id");

            entity.ToTable("tbServicioPorPedido", "Genl");

            entity.Property(e => e.pedDet_Id).ValueGeneratedNever();

            entity.HasOne(d => d.pedDet).WithOne(p => p.tbServicioPorPedido)
                .HasForeignKey<tbServicioPorPedido>(d => d.pedDet_Id)
                .HasConstraintName("FK_Genl_tbServicioPorPedido_tbPedidoDetalle_pedDet_Id");

            entity.HasOne(d => d.serv).WithMany(p => p.tbServicioPorPedido)
                .HasForeignKey(d => d.serv_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbServicioPorPedido_tbServicio_serv_Id");
        });

        modelBuilder.Entity<tbSubCategoria>(entity =>
        {
            entity.HasKey(e => e.subCat_Id).HasName("PK_Genl_tbSubCategoria_subCat_Id");

            entity.ToTable("tbSubCategoria", "Genl");

            entity.Property(e => e.subCat_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.catg_Nombre)
                .IsRequired()
                .HasMaxLength(500);

            entity.HasOne(d => d.catg).WithMany(p => p.tbSubCategoria)
                .HasForeignKey(d => d.catg_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbSubCategoria_tbCategoria_catg_Id");
        });

        modelBuilder.Entity<tbSubdivicionLugar>(entity =>
        {
            entity.HasKey(e => e.subLug_Id).HasName("PK_Genl_tbSubdivicionLugar_subLug_Id");

            entity.ToTable("tbSubdivicionLugar", "Genl");

            entity.Property(e => e.subLug_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.subLug_Nombre)
                .IsRequired()
                .HasMaxLength(500);

            entity.HasOne(d => d.catSub).WithMany(p => p.tbSubdivicionLugar)
                .HasForeignKey(d => d.catSub_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbSubdivicionLugar_tbCategoriaSubdivicion_catSub_Id");

            entity.HasOne(d => d.lug).WithMany(p => p.tbSubdivicionLugar)
                .HasForeignKey(d => d.lug_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbSubdivicionLugar_tbLugar_lug_Id");
        });

        modelBuilder.Entity<tbTiempo>(entity =>
        {
            entity.HasKey(e => e.tiemp_Id).HasName("PK_Genl_tbTiempo_tiemp_Id");

            entity.ToTable("tbTiempo", "Genl");

            entity.Property(e => e.tiemp_Id).ValueGeneratedNever();
            entity.Property(e => e.tiemp_Descripcion)
                .IsRequired()
                .HasMaxLength(300);
        });

        modelBuilder.Entity<tbTipoCatalogo>(entity =>
        {
            entity.HasKey(e => e.tipCatg_Id).HasName("PK_Genl_tbTipoCatalogo_tipCatg_Id");

            entity.ToTable("tbTipoCatalogo", "Genl");

            entity.Property(e => e.tipCatg_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.tipCatg_Descripcion)
                .IsRequired()
                .HasMaxLength(300);
        });

        modelBuilder.Entity<tbTipoContrato>(entity =>
        {
            entity.HasKey(e => e.tipC_Id).HasName("PK_Genl_tbTipoContrato_tipC_Id");

            entity.ToTable("tbTipoContrato", "Genl");

            entity.Property(e => e.tipC_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.tipC_Descripcion)
                .IsRequired()
                .HasMaxLength(300);
        });

        modelBuilder.Entity<tbTipoIdentificacion>(entity =>
        {
            entity.HasKey(e => e.tipIde_Id).HasName("PK_Genl_tbTipoIdentificacion_tipIde_Id");

            entity.ToTable("tbTipoIdentificacion", "Genl");

            entity.Property(e => e.tipIde_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.tipIde_Descripcion)
                .IsRequired()
                .HasMaxLength(300);
        });

        modelBuilder.Entity<tbTipoImagen>(entity =>
        {
            entity.HasKey(e => e.tipImg_Id).HasName("PK_Genl_tbTipoImagen_tipImg_Id");

            entity.ToTable("tbTipoImagen", "Genl");

            entity.Property(e => e.tipImg_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.tipImg_Descripcion)
                .IsRequired()
                .HasMaxLength(300)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<tbTipoPago>(entity =>
        {
            entity.HasKey(e => e.tipPag_Id).HasName("PK_Genl_tbTipoPago_tipPag_Id");

            entity.ToTable("tbTipoPago", "Genl");

            entity.Property(e => e.tipPag_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.tipPag_Descripcion)
                .IsRequired()
                .HasMaxLength(200);
        });

        modelBuilder.Entity<tbTipoReaccion>(entity =>
        {
            entity.HasKey(e => e.tipReac_Id).HasName("PK_Genl_tbTipoReaccion_tipReac_Id");

            entity.ToTable("tbTipoReaccion", "Genl");

            entity.Property(e => e.tipReac_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.tipReac_Descripcion)
                .IsRequired()
                .HasMaxLength(300)
                .HasDefaultValue("");

            entity.HasOne(d => d.catReac).WithMany(p => p.tbTipoReaccion)
                .HasForeignKey(d => d.catReac_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbTipoReaccion_tbTransaccion_catReac_Id");
        });

        modelBuilder.Entity<tbTipoTelefono>(entity =>
        {
            entity.HasKey(e => e.tipTel_Id).HasName("PK_Genl_tbTipoTelefono_tipTel_Id");

            entity.ToTable("tbTipoTelefono", "Genl");

            entity.Property(e => e.tipTel_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.tipTel_Descripcion)
                .IsRequired()
                .HasMaxLength(300);
        });

        modelBuilder.Entity<tbTipoToken>(entity =>
        {
            entity.HasKey(e => e.tipToke_Id).HasName("PK_Genl_tbTipoToken_tipToke_Id");

            entity.ToTable("tbTipoToken", "Genl");

            entity.Property(e => e.tipToke_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.tipToke_Descripcion)
                .IsRequired()
                .HasMaxLength(300);
        });

        modelBuilder.Entity<tbTipoTransaccion>(entity =>
        {
            entity.HasKey(e => e.tipTran_Id).HasName("PK_Genl_tbTipoTransaccion_tipTran_Id");

            entity.ToTable("tbTipoTransaccion", "Genl");

            entity.Property(e => e.tipTran_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.tipTran_Nombre)
                .IsRequired()
                .HasMaxLength(300)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<tbTipoUsuario>(entity =>
        {
            entity.HasKey(e => e.tipUs_Id).HasName("PK_Genl_tbTipoUsuario_tipUs_Id");

            entity.ToTable("tbTipoUsuario", "Genl");

            entity.Property(e => e.tipUs_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.tipUs_Descripcion)
                .IsRequired()
                .HasMaxLength(300);
        });

        modelBuilder.Entity<tbTitulo>(entity =>
        {
            entity.HasKey(e => e.titu_Id).HasName("PK_Genl_tbTitulo_titu_Id");

            entity.ToTable("tbTitulo", "Genl");

            entity.Property(e => e.titu_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.titu_Descripcion)
                .IsRequired()
                .HasMaxLength(300);

            entity.HasOne(d => d.ariaP).WithMany(p => p.tbTitulo)
                .HasForeignKey(d => d.ariaP_Id)
                .HasConstraintName("FK_Genl_tbTitulo_tbAriaPuesto_nesCa_Id");

            entity.HasOne(d => d.nivEd).WithMany(p => p.tbTitulo)
                .HasForeignKey(d => d.nivEd_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbTitulo_tbNivelEducativo_nivEd_Id");
        });

        modelBuilder.Entity<tbTituloProc>(entity =>
        {
            entity.HasKey(e => e.tiProc_Id).HasName("PK_Genl_tbTituloProc_tiProc_Id");

            entity.ToTable("tbTituloProc", "Genl");

            entity.Property(e => e.tiProc_Id).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.proc).WithMany(p => p.tbTituloProc)
                .HasForeignKey(d => d.proc_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbTituloProc_tbProceso_proc_Id");

            entity.HasOne(d => d.titu).WithMany(p => p.tbTituloProc)
                .HasForeignKey(d => d.titu_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbTituloProc_tbTitulo_titu_Id");
        });

        modelBuilder.Entity<tbTransaccion>(entity =>
        {
            entity.HasKey(e => e.tran_Id).HasName("PK_Genl_tbTransaccion_tran_Id");

            entity.ToTable("tbTransaccion", "Genl");

            entity.Property(e => e.tran_Id).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.tipTran).WithMany(p => p.tbTransaccion)
                .HasForeignKey(d => d.tipTran_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbTransaccion_tbTipoTransaccion_tipCatg_Id");
        });

        modelBuilder.Entity<tbUbicacion>(entity =>
        {
            entity.HasKey(e => e.ubc_Id).HasName("PK_Genl_tbUbicacion_ubc_Id");

            entity.ToTable("tbUbicacion", "Genl");

            entity.Property(e => e.ubc_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ubc_Latitud)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.ubc_Longitub)
                .IsRequired()
                .HasMaxLength(200);

            entity.HasOne(d => d.subLug).WithMany(p => p.tbUbicacion)
                .HasForeignKey(d => d.subLug_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbUbicacion_tbSubdivicionLugar_subLug_Id");
        });

        modelBuilder.Entity<tbUsuarioTelefono>(entity =>
        {
            entity.HasKey(e => e.usTel_Id).HasName("PK_Genl_tbUsuarioTelefono_usTel_Id");

            entity.ToTable("tbUsuarioTelefono", "Genl");

            entity.Property(e => e.usTel_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.usTel_Numero)
                .IsRequired()
                .HasMaxLength(300);

            entity.HasOne(d => d.tipTel).WithMany(p => p.tbUsuarioTelefono)
                .HasForeignKey(d => d.tipTel_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbUsuarioTelefono_tbTipoTelefono_tipTel_Id");

            entity.HasOne(d => d.user).WithMany(p => p.tbUsuarioTelefono)
                .HasForeignKey(d => d.user_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbUsuarioTelefono_tbUsuarios_user_Id");
        });

        modelBuilder.Entity<tbUsuarios>(entity =>
        {
            entity.HasKey(e => e.user_Id).HasName("PK_Genl_tbUsuarios_User_Id");

            entity.ToTable("tbUsuarios", "Genl", tb => tb.HasTrigger("Trigger_VerificarUsuario"));

            entity.Property(e => e.user_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.tipIde_Id).HasDefaultValue(new Guid("f0932129-5a5c-4b93-ae15-5922c3875e07"));
            entity.Property(e => e.user_Correo)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.user_Descripcion)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.user_Facebook)
                .IsRequired()
                .HasMaxLength(100)
                .HasDefaultValue("");
            entity.Property(e => e.user_FechaCreacion).HasColumnType("datetime");
            entity.Property(e => e.user_Identificacion)
                .IsRequired()
                .HasMaxLength(100)
                .HasDefaultValue("");
            entity.Property(e => e.user_Intagram)
                .IsRequired()
                .HasMaxLength(100)
                .HasDefaultValue("");
            entity.Property(e => e.user_NombreUsuario)
                .IsRequired()
                .HasMaxLength(150)
                .HasDefaultValue("");
            entity.Property(e => e.user_Password)
                .IsRequired()
                .HasMaxLength(1000);
            entity.Property(e => e.user_PasswordSal)
                .IsRequired()
                .HasMaxLength(1000);

            entity.HasOne(d => d.tipIde).WithMany(p => p.tbUsuarios)
                .HasForeignKey(d => d.tipIde_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbUsuarios_tbTipoIdentificacion_tipIde_Id");

            entity.HasOne(d => d.ubc).WithMany(p => p.tbUsuarios)
                .HasForeignKey(d => d.ubc_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbUsuarios_tbUbicacion_ubc_Id");

            entity.HasOne(d => d.usInf).WithMany(p => p.tbUsuarios)
                .HasForeignKey(d => d.usInf_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbUsuarios_tbInfoUnicaUsuario_usInf_Id");

            entity.HasMany(d => d.even).WithMany(p => p.userNavigation)
                .UsingEntity<Dictionary<string, object>>(
                    "tbPosiblePor",
                    r => r.HasOne<tbEvento>().WithMany()
                        .HasForeignKey("even_Id")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Genl_tbPosiblePor_tbEvento_even_Id"),
                    l => l.HasOne<tbUsuarios>().WithMany()
                        .HasForeignKey("user_Id")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Genl_tbPosiblePor_tbUsuarios_user_Id"),
                    j =>
                    {
                        j.HasKey("user_Id", "even_Id").HasName("PK_Genl_tbPosiblePor_user_Id_even_Id");
                        j.ToTable("tbPosiblePor", "Genl");
                    });

            entity.HasMany(d => d.rol).WithMany(p => p.user)
                .UsingEntity<Dictionary<string, object>>(
                    "tbUsuariosRoles",
                    r => r.HasOne<tbRoles>().WithMany()
                        .HasForeignKey("rol_Id")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Genl_tbUsuariosRoles_tbRoles_rol_Id"),
                    l => l.HasOne<tbUsuarios>().WithMany()
                        .HasForeignKey("user_Id")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Genl_tbUsuariosRoles_tbUsuarios_user_Id"),
                    j =>
                    {
                        j.HasKey("user_Id", "rol_Id").HasName("PK_Genl_tbUsuariosRoles_user_Id_rol_Id");
                        j.ToTable("tbUsuariosRoles", "Genl");
                    });
        });

        modelBuilder.Entity<tbUsuariosClaims>(entity =>
        {
            entity.HasKey(e => e.userClai_Id).HasName("PK_Genl_tbUsuariosClaims_userClai_Id");

            entity.ToTable("tbUsuariosClaims", "Genl");

            entity.Property(e => e.userClai_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.userClai_Tipo)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.userClai_Value)
                .IsRequired()
                .HasMaxLength(300);

            entity.HasOne(d => d.user).WithMany(p => p.tbUsuariosClaims)
                .HasForeignKey(d => d.user_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbUsuariosClaims_tbUsuarios_user_Id");
        });

        modelBuilder.Entity<tbUsuariosTokens>(entity =>
        {
            entity.HasKey(e => new { e.user_Id, e.tipToke_Id }).HasName("PK_Genl_tbUsuariosTokens_user_Id_tipToke_Id");

            entity.ToTable("tbUsuariosTokens", "Genl");

            entity.Property(e => e.userToke_Token).IsRequired();

            entity.HasOne(d => d.tipToke).WithMany(p => p.tbUsuariosTokens)
                .HasForeignKey(d => d.tipToke_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbUsuariosTokens_tbTipoToken_tipToke_Id");

            entity.HasOne(d => d.user).WithMany(p => p.tbUsuariosTokens)
                .HasForeignKey(d => d.user_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbUsuariosTokens_tbUsuarios_user_Id");
        });

        modelBuilder.Entity<tbVacante>(entity =>
        {
            entity.HasKey(e => e.vac_Id).HasName("PK_Genl_tbVacante_catEd_Id");

            entity.ToTable("tbVacante", "Genl");

            entity.Property(e => e.vac_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.vac_DescripcionOferta)
                .IsRequired()
                .HasMaxLength(2000);
            entity.Property(e => e.vac_SalarioMax).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.vac_SalarioMinio).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.ariaP).WithMany(p => p.tbVacante)
                .HasForeignKey(d => d.ariaP_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbVacante_tbAriaPuesto_ariaP_Id");

            entity.HasOne(d => d.gene).WithMany(p => p.tbVacante)
                .HasForeignKey(d => d.gene_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbVacante_tbGenero_gene_Id");

            entity.HasOne(d => d.puest).WithMany(p => p.tbVacante)
                .HasForeignKey(d => d.puest_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbVacante_tbPuesto_puest_Id");

            entity.HasOne(d => d.tipC).WithMany(p => p.tbVacante)
                .HasForeignKey(d => d.tipC_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbVacante_tbTipoContrato_tipC_Id");

            entity.HasOne(d => d.user).WithMany(p => p.tbVacante)
                .HasForeignKey(d => d.user_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbVacante_tbUsuarios_user_Id");
        });

        modelBuilder.Entity<tbVentaRelampago>(entity =>
        {
            entity.HasKey(e => e.ventR_Id).HasName("PK_Genl_tbVentaRelampago_ventR_Id");

            entity.ToTable("tbVentaRelampago", "Genl");

            entity.Property(e => e.ventR_Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ventR_Descripcion)
                .IsRequired()
                .HasMaxLength(1000)
                .HasDefaultValue("");
            entity.Property(e => e.ventR_Fecha).HasColumnType("datetime");
            entity.Property(e => e.ventR_Precio).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ventR_Titulo)
                .IsRequired()
                .HasMaxLength(300)
                .HasDefaultValue("");

            entity.HasOne(d => d.tran).WithMany(p => p.tbVentaRelampago)
                .HasForeignKey(d => d.tran_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbVentaRelampago_tbTransaccion_tran_Id");

            entity.HasOne(d => d.ubc).WithMany(p => p.tbVentaRelampago)
                .HasForeignKey(d => d.ubc_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbVentaRelampago_tbUbicacion_ubc_Id");

            entity.HasOne(d => d.user).WithMany(p => p.tbVentaRelampago)
                .HasForeignKey(d => d.user_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Genl_tbVentaRelampago_tbUsuarios_user_Id");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}